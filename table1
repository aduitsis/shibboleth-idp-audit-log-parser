#!/usr/bin/perl -w

use strict;
use warnings;

#we need those libs
use Data::Dumper;
use FindBin qw($Bin);
use File::Basename;
use lib "$Bin/../lib";
use Getopt::Long;

use Scalar::Util qw(looks_like_number);

#first get the oid which was requested by the server
my $oid = pop or die("Hmmm, seems that you are running the command outside the agent. Well, anyway the last arg must be the oid\n");
my @oid = ($oid =~ /\.(\d+)+/g); #the g at the end slurps as many \d+'s it can to the array. 
if (!@oid) {
	print STDERR "The last argument should always be an oid (example: .1.3.6.1.4.1)\n";
	exit(1);
}

#then get the second last argument which should be either -g or -n
my $operation;
my $argument = pop or die("Hmmm, seems that you are running the command outside the agent. Well, anyway the second last arg must be either -g or -n\n");
if ($argument eq "-g") {
	$operation = "get";
} elsif ($argument eq "-n") {
	$operation = "next";
} else {
	print STDERR "The second from the last argument should be either -g or -n\n";
	exit(2);
}
	

#ok now we can leave the rest to getopt 
my $DEBUG=0;
my $delimiter = "\\s+";
my $tableoid=".0";
GetOptions("t=s" => \$tableoid, "debug" => \$DEBUG, "d=s" => \$delimiter);
my @tableoid = ($tableoid =~ /\.(\d+)+/g);
if (!@tableoid) {
        print STDERR "The tableoid should be an oid (example: .1.3.6.1.4.1)\n";
        exit(3);
}



#is this a get or a next request?

#parse the output

my @lines=();

#Now we split the input into rows and columns.
my $ncolumns = 0;
while(<>) {
	my @pieces = split $delimiter;#each row is split using $delimiter
	my $columns = scalar @pieces; #this is how many elements this row contains
	$ncolumns = ($ncolumns<$columns)? $columns : $ncolumns; # this is the maximum rows we know of so far
	push @lines,(\@pieces); #ok the lines array will hold all the pieces...
}	

my $nlines = scalar @lines; #nlines is the number of lines we have counted

$DEBUG&&print STDERR Dumper(@lines),"\n";




#job insurance...
while (@tableoid) {
	unless (shift(@tableoid) == shift(@oid)){
		die("Grrrr...-t content and last argument don't agree...exiting\n");
		exit(10);
	 }
}

$DEBUG && print STDERR Dumper(@oid);

#alright now we have the entire data...time to output something

if (!@oid) {
	$DEBUG&&print STDERR "Whoah, bare table oid...\n";
	@oid = (1,1,1);
	$operation = "get";
}

if (scalar(@oid) == 1) {
	push(@oid,(1));push(@oid,(1));
	 $operation = "get";
	$DEBUG&&print STDERR "Still wants the entire table\n";
}

if (scalar(@oid) == 2) {
	push(@oid,(1));
	$operation = "get";
	$DEBUG&&print STDERR "Hmmm, partial request...\n";
}

#print Dumper(@oid);
		

my ($row,$column,$stupid) = (pop(@oid),pop(@oid),pop(@oid));
push @oid,($stupid,$column,$row);

if($stupid ne "1") {
	$DEBUG && print STDERR "Hmmm major problem...the third last number should be 1\n";
	exit(6);
}


if ($operation eq "next") {
	$row++;
	if ($row == $nlines+1) {
		$row = 1;
		$column++;
	}
}

$DEBUG&&print STDERR ".",join(".",@oid),"\n";
$DEBUG&&print STDERR ".1.$column.$row\n";
		

	if ($row > $nlines) {
		$DEBUG && print STDERR "Row requested does not exist\n";
		exit(4);
	}
	my $rowdata = $lines[$row-1];
	#print Dumper($rowdata);
	if ($column > (scalar @{$rowdata})) {
		$DEBUG && print STDERR "Column requested does not exist\n";
		exit(5);
	}
	

my $value = $rowdata->[$column-1];

print $tableoid,".1.",$column,".",$row,"\n";

if ($value =~ /^\d+$/) {
	print "integer\n";
} 
elsif(looks_like_number($value)) {
	print "integer\n";
	#we clear the decimal...this is ugly ugly ugly
	###$value =~ s/\.//;
}
else {
	print "string\n";
}

print $value,"\n";



	
